import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 * This program will simulate the behavior of random walk.
 * The user first specify the size of the stage, if the point goes out of the stage,
 * it will appear on the opposite side of the stage. For example, if a point goes 
 * beyond the top boundary of the stage, it will re-emerge at the botom. User may seperate
 * two numbers by space of a new line character("enter"). Press enter to confirm.
 * 
 * Then user will then be asked to select a mode.
 * Auto mode is for animated real-time random movement. Numbered mode is for a fixed
 * number of moves, without real-time animation.
 * 
 * The auto mode will update every 20 milisecond, each update will contain 500 
 * random movements. The point will change color every 200 updates to make the movement
 * pattern more clear.
 * 
 * If the numbered mode is chosen, user will be prompted to enter the number of moves desired.
 * The number should not exceed the maximam number of a long integer.
 * The numbers will be evenly divided to 12 parts, each in a different color.
 * For correct representation of colors, the entered number should be a multiple
 * of 500 and should be greater than 60000
 * 
 * After the window is closed for auto mode, or after the generation is finished
 * for numbered mode, a png file,whih contains the snapshot of the random movement, 
 * will be created on the directory where source file is stored. The name of the 
 * png file will be <number_of_movements-curent_time-current_date>
 * 
 * The user should be responsible for correctness of input, for input-validation
 * is not implemented.
 * 
 * @author Guanqing Yan
 * @wordpress: thethirduniverse.wordpress.com
 * */
@SuppressWarnings("serial")
public class main extends JFrame{
	public Timer timer;
	public Stage panel;

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable(){
			@Override
			public void run(){
				@SuppressWarnings("resource")
				Scanner s = new Scanner(System.in);
				System.out.println("input size of stage, width first, then height");
				Utility.X=s.nextInt();
				Utility.Y=s.nextInt();
				System.out.println("1 for auto, 2 for numbered");
				int ch = s.nextInt();
				long num=0;
				if(ch==2){
					System.out.print("Input number of moves (which will be floored to multiple of 500):");
					num=s.nextLong();
				}
				main m = new main(ch,num);
				m.setVisible(true);
			}
		});
	}

	public main(int choice, long number){
		init(choice,number);
	}

	private void init(int choice, long number){
		setTitle("Random Walk");
		setSize(Utility.PREFERRED_X, Utility.PREFERRED_Y);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		(panel=new Stage()).setPreferredSize(new Dimension(Utility.X, Utility.Y));

		JScrollPane scroller = new JScrollPane(panel);
		scroller.getVerticalScrollBar().setUnitIncrement(50);
		scroller.getHorizontalScrollBar().setUnitIncrement(50);
		scroller.getVerticalScrollBar().setBlockIncrement(100);
		scroller.getHorizontalScrollBar().setBlockIncrement(100);
		this.add(scroller, BorderLayout.CENTER);

		pack();
		final main self = this;
		if(choice==1){
			this.timer=new Timer(Utility.UPDATE_INTERVAL,new ActionListener(){
				public void actionPerformed(ActionEvent e){
					self.repaint();
				}
			});
			this.addWindowListener(new java.awt.event.WindowAdapter() {
				@Override
				public void windowClosing(java.awt.event.WindowEvent windowEvent) {
					panel.save();
				}
			});
			this.timer.start();
		}
		else{
			self.panel.goFor(number);
			panel.save();
			System.out.println("Generation Finished");
			System.exit(0);
		}
	}

}

@SuppressWarnings("serial")
final class Stage extends JPanel{
	/*number of blocks remaining before changing color*/
	private int color_count=0;
	/*number of blocks drawn*/
	private long block_count=0;
	private int currentX=Utility.X>>1;
	private int currentY=Utility.Y>>1;
	private Random r = new Random();
	private BufferedImage image=null;
	private Graphics2D image_graphics;

	public void save(){
		Calendar cal = Calendar.getInstance();
		cal.getTime();
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss-yyyy:MM:dd");
		String filename=String.format("%d-%s.png",block_count*Utility.BLOCK_SIZE,sdf.format(cal.getTime()));
		File outputfile = new File(filename);
		try {
			ImageIO.write(image, "png", outputfile);
			System.out.printf("Image saved as %s\n",filename);
		} catch (IOException e) {
			System.out.println("Save failed");
		}
	}

	/**move for a fixed number of times, will be rounded down to the highest
	 * multiple of BLOCK_SIZE, 500 by default*/
	public void goFor(long number){
		image=new BufferedImage(Utility.X,Utility.Y,BufferedImage.TYPE_INT_RGB);
		Graphics2D g = image.createGraphics();
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, Utility.X,Utility.Y);
		g.setStroke(new BasicStroke(1));

		long block = number/Utility.BLOCK_SIZE;
		long block_color_count_max = block/12;
		long block_color_count=block_color_count_max;
		g.setPaint(Utility.nextColor());
		for(int i=0;i<block;i++){
			for(int j=0;j<Utility.BLOCK_SIZE;j++){
				switch(r.nextInt(4)){
				case 0:
					if((currentX+=1)>=Utility.X-1)
						currentX=0;
					break;
				case 1:
					if((currentY+=1)>=Utility.Y-1)
						currentY=0;
					break;
				case 2:
					if((currentX-=1)<=0)
						currentX=Utility.X-1;
					break;
				case 3:
					if((currentY-=1)<=0)
						currentY=Utility.Y-1;
					break;
				}
				g.drawLine(currentX, currentY, currentX, currentY);
			}
			if(--block_color_count==0){
				g.setPaint(Utility.nextColor());
				block_color_count=block_color_count_max;
			}
			System.out.printf("Finished:%f%%\n",((double)(i*100+100))/block);
		}
		block_count=block;
	}

	/**
	 * Draw a block of moves on to the image
	 * */
	private void move(Graphics2D g){
		for(int i=0;i<Utility.BLOCK_SIZE;i++){
			switch(r.nextInt(4)){
			case 0:
				if((currentX+=1)>=Utility.X-1)
					currentX=0;
				break;
			case 1:
				if((currentY+=1)>=Utility.Y-1)
					currentY=0;
				break;
			case 2:
				if((currentX-=1)<=0)
					currentX=Utility.X-1;
				break;
			case 3:
				if((currentY-=1)<=0)
					currentY=Utility.Y-1;
				break;
			}
			g.drawLine(currentX, currentY, currentX, currentY);
		}
		color_count--;
		block_count++;
	}
	@Override
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		if(this.image==null){
			image=(BufferedImage)this.createImage(Utility.X, Utility.Y);
			image_graphics=image.createGraphics();
			image_graphics.setColor(Color.BLACK);
			image_graphics.fillRect(0, 0, Utility.X,Utility.Y);
			image_graphics.setStroke(new BasicStroke(1));
		}
		if(color_count<=0){
			color_count=Utility.COLOR_CHANGE_FREQUENCY;
			image_graphics.setPaint(Utility.nextColor());
		}
		Graphics2D g2d = (Graphics2D)g;
		g2d.drawImage(image, null, 0, 0);
		move(image_graphics);
	}
}

final class Utility {
	static public int X;
	static public int Y;
	static public final int PREFERRED_X = 300;
	static public final int PREFERRED_Y = 300;
	static public final float ALPHA = 0.05f;
	static public final int UPDATE_INTERVAL = 20;
	static public final int BLOCK_SIZE = 500;
	static public final int COLOR_CHANGE_FREQUENCY=200;
	static private final Color[] colors = {
		new Color(1,0,0,ALPHA),
		new Color(1,0.5f,0,ALPHA),
		new Color(1,1,0,ALPHA),
		new Color(0.5f,1,0,ALPHA),
		new Color(0,1,0,ALPHA),
		new Color(0,1,0.5f,ALPHA),
		new Color(0,1,1,ALPHA),
		new Color(0,0.5f,1,ALPHA),
		new Color(0,0,1,ALPHA),
		new Color(0.5f,0,1,ALPHA),
		new Color(1,0,1,ALPHA),
		new Color(1,0,0.5f,ALPHA),
	};
	static private int currentColorIndex=-1;
	static public Color nextColor(){
		if(++currentColorIndex==colors.length){
			currentColorIndex=0;
		}
		return colors[currentColorIndex];
	}
}

